package br.iteratorsystems.cps.entities;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import br.iteratorsystems.cps.interfaces.EntityAble;

/**
 * Produtogeral generated by hbm2java
 */
@Entity
@Table(name = "produtogeral", schema = "tabelas")
public class PRODUTOGERAL implements java.io.Serializable, EntityAble {

	private static final long serialVersionUID = -2645769229904839400L;

	private String codigoBarras;
	private String descricao;
	private String unidadeMedida;
	private String embalagem;
	private Character status;
	private Character imagem;
	private Set<LISTAPRODUTOITEM> listaProdutoItems = 
							new HashSet<LISTAPRODUTOITEM>(0);

	public PRODUTOGERAL() {
	}

	public PRODUTOGERAL(String codigoBarras, String descricao) {
		this.codigoBarras = codigoBarras;
		this.descricao = descricao;
	}

	public PRODUTOGERAL(String codigoBarras, String descricao,
			String unidadeMedida, String embalagem, Character status,
			Set<LISTAPRODUTOITEM> listaProdutoItems) {
		this.codigoBarras = codigoBarras;
		this.descricao = descricao;
		this.unidadeMedida = unidadeMedida;
		this.embalagem = embalagem;
		this.status = status;
		this.listaProdutoItems = listaProdutoItems;
	}

	@Id
	@Column(name = "codigo_barras", unique = true, nullable = false, length = 20)
	public String getCodigoBarras() {
		return this.codigoBarras;
	}

	public void setCodigoBarras(String codigoBarras) {
		this.codigoBarras = codigoBarras;
	}

	@Column(name = "descricao", nullable = false, length = 60)
	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	@Column(name = "unidade_medida", length = 3)
	public String getUnidadeMedida() {
		return this.unidadeMedida;
	}

	public void setUnidadeMedida(String unidadeMedida) {
		this.unidadeMedida = unidadeMedida;
	}

	@Column(name = "embalagem", length = 20)
	public String getEmbalagem() {
		return this.embalagem;
	}

	public void setEmbalagem(String embalagem) {
		this.embalagem = embalagem;
	}

	@Column(name = "status", length = 1)
	public Character getStatus() {
		return this.status;
	}

	public void setStatus(Character status) {
		this.status = status;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "produtogeral")
	public Set<LISTAPRODUTOITEM> getListaProdutoItems() {
		return this.listaProdutoItems;
	}

	public void setListaProdutoItems(Set<LISTAPRODUTOITEM> listaProdutoItems) {
		this.listaProdutoItems = listaProdutoItems;
	}
	
	@Column(name="possui_imagem", length = 1)
	public Character getImagem() {
		return imagem;
	}
	
	public void setImagem(Character imagem) {
		this.imagem = imagem;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codigoBarras == null) ? 0 : codigoBarras.hashCode());
		result = prime * result
				+ ((descricao == null) ? 0 : descricao.hashCode());
		result = prime * result
				+ ((embalagem == null) ? 0 : embalagem.hashCode());
		result = prime * result + ((status == null) ? 0 : status.hashCode());
		result = prime * result + ((imagem == null) ? 0 : imagem.hashCode());
		result = prime * result
				+ ((unidadeMedida == null) ? 0 : unidadeMedida.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof PRODUTOGERAL)) {
			return false;
		}
		PRODUTOGERAL other = (PRODUTOGERAL) obj;
		if (codigoBarras == null) {
			if (other.codigoBarras != null) {
				return false;
			}
		} else if (!codigoBarras.equals(other.codigoBarras)) {
			return false;
		}
		if (descricao == null) {
			if (other.descricao != null) {
				return false;
			}
		} else if (!descricao.equals(other.descricao)) {
			return false;
		}
		if (embalagem == null) {
			if (other.embalagem != null) {
				return false;
			}
		} else if (!embalagem.equals(other.embalagem)) {
			return false;
		}
		if (status == null) {
			if (other.status != null) {
				return false;
			}
		} else if (!status.equals(other.status)) {
			return false;
		}
		if (imagem == null) {
			if (other.imagem != null) {
				return false;
			}
		} else if (!status.equals(other.status)) {
			return false;
		}
		if (unidadeMedida == null) {
			if (other.unidadeMedida != null) {
				return false;
			}
		} else if (!unidadeMedida.equals(other.unidadeMedida)) {
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		return "PRODUTOGERAL [codigoBarras=" + codigoBarras + ", descricao="
				+ descricao + ", embalagem=" + embalagem + ", status=" + status
				+"iamgem="+imagem+ ", unidadeMedida=" + unidadeMedida + "]";
	}
}